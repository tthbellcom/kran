{
  "name": "redbird",
  "version": "0.2.3",
  "description": "A reverse proxy with support for dynamic tables based on etcd",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/OptimalBits/redbird.git"
  },
  "keywords": [
    "proxy",
    "reverse",
    "etcd"
  ],
  "author": {
    "name": "Manuel Astudillo"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/OptimalBits/redbird/issues"
  },
  "homepage": "https://github.com/OptimalBits/redbird",
  "dependencies": {
    "bluebird": "^2.2.2",
    "bunyan": "^1.0.0",
    "http-proxy": "^1.2.0",
    "lodash": "^2.4.1",
    "valid-url": "^1.0.9"
  },
  "readme": "Redbird Reverse Proxy\n=====================\n\n![redbird](http://logo32.com/wp-content/uploads/2012/09/red-bird-Vector.jpg)\n\nHandling dynamic virtual hosts, load balancing, proxying web sockets and SSL encryption should be\neasy and robust.\n\nWith redbird you get a complete library to build dynamic reverse proxies with the speed and robustness of http-proxy.\n\nThis light-weight package includes everything you need for easy reverse routing of your applications.\nGreat for routing many applications from different domains in one single host, handling SSL with ease, etc.\n\nDeveloped by [@manast](https:twitter.com/manast)\n\n##Install\n\n\n```\nnpm install redbird\n```\n\n##Example\n\n\nYou can programatically register or unregister routes dynamically even if the proxy is already running:\n\n```\nvar proxy = require('redbird')({port: 80});\n\n// Route to any global ip\nproxy.register(\"optimalbits.com\", \"http://167.23.42.67:8000\");\n\n// Route to any local ip, for example from docker containers.\nproxy.register(\"example.com\", \"http://172.17.42.1:8001\");\n\n// Route from hostnames as well as paths\nproxy.register(\"example.com/static\", \"http://172.17.42.1:8002\");\nproxy.register(\"example.com/media\", \"http://172.17.42.1:8003\");\n\n// Subdomains, paths, everything just works as expected\nproxy.register(\"abc.example.com\", \"http://172.17.42.4:8080\");\nproxy.register(\"abc.example.com/media\", \"http://172.17.42.5:8080\");\n\n// Route to any href including a target path\nproxy.register(\"foobar.example.com\", \"http://172.17.42.6:8080/foobar\");\n\n```\n\n\n##About HTTPS\n\nThe HTTPS proxy supports virtual hosts by using SNI (which most modern browsers support: IE7 and above).\nThe proxying is performed by hostname, so you must use the same SSL certificates for a given hostname independently of its paths.\n\n\n##HTTPS Example\n\nConceptually HTTPS is easy, but it is also easy to struggle getting it right. With redbird its straightforward, check this complete example:\n\n1) Generate a localhost development SSL certificate:\n\n```\n/certs $ openssl genrsa -out dev-key.pem 1024\n/certs $ openssl req -new -key dev-key.pem -out dev-csr.pem\n\n// IMPORTANT: Do not forget to fill the field! Common Name (e.g. server FQDN or YOUR name) []:localhost\n\n/certs $ openssl x509 -req -in dev-csr.pem -signkey dev-key.pem -out dev-cert.pem\n\n```\n\nNote: For production sites you need to buy valid SSL certificates from a trusted authority.\n\n2) Create a simple redbird based proxy:\n\n```\nvar redbird = new require('redbird')({\n\tport: 8080,\n\n\t// Specify filenames to default SSL certificates (in case SNI is not supported by the \n\t// user's browser)\n\tssl: {\n\t\tport: 8443,\n\t\tkey: \"certs/dev-key.pem\",\n\t\tcert: \"certs/dev-cert.pem\",\n\t}\n});\n\n// Since we will only have one https host, we dont need to specify additional certificates.\nredbird.register('localhost', 'http://localhost:8082', {ssl: true});\n```\n\n3) Test it:\n\nPoint your browser to ```localhost:8000``` and you will see how it automatically redirects to your https server and proxies you to \nyour target server.\n\n\nYou can define many virtual hosts, each with its own SSL certificate. And if you do not define any, they will use the default one\nas in the example above:\n\n```\nredbird.register('example.com', 'http://172.60.80.2:8082', {\n\tssl: {\n\t\tkey: \"../certs/example.key\",\n\t\tcert: \"../certs/example.crt\",\t\n\t\tca: \"../certs/example.ca\"\n\t}\n});\n\nredbird.register('foobar.com', 'http://172.60.80.3:8082', {\n\tssl: {\n\t\tkey: \"../certs/foobar.key\",\n\t\tcert: \"../certs/foobar.crt\",\t\n\t}\n});\n\n```\n\n\n##Features\n\n- Flexible and easy routing.\n- Websockets.\n- Seamless SSL Support (HTTPS -> HTTP proxy)\n- Automatic HTTP to HTTPS redirects.\n- Register and unregister routes programatically.\n- Optional logging based on bunyan.\n\n##Roadmap\n\n- Load balancer.\n- Simple IP Filtering.\n- Automatic routing via Redis or Etcd backend.\n\n\n##Reference\n\n<a name=\"redbird\"/>\n###Redbird(opts)\n\nThis is the Proxy constructor. Creates a new Proxy and starts listening to\nthe given port.\n\n__Arguments__\n\n```javascript\n    opts {Object} Options to pass to the proxy:\n    {\n    \tport: {Number} // port number that the proxy will listen to.\n    \tssl: { // Optional SSL proxying.\n    \t\tport: {Number} // SSL port the proxy will listen to.\n    \t\t// Default certificates\n    \t\tkey: keyPath,  \n    \t\tcert: certPath,\n    \t\tca: caPath // Optional.\n    \t}\n\t}\n```\n\n---------------------------------------\n\n<a name=\"register\"/>\n#### Redbird##register(src, target, opts)\n\nRegister a new route. As soon as this method is called, the proxy will\nstart routing the sources to the given targets.\n  \n__Arguments__\n\n```javascript\n    src {String} {String|URL} A string or a url parsed by node url module.\n    \tNote that port is ignored, since the proxy just listens to one port.\n\n    target {String|URL} A string or a url parsed by node url module.\n    opts {Object} route options:\n    examples:\n    {ssl : true} // Will use default ssl certificates.\n    {ssl: {\n        redirectPort: port, // optional https port number to be redirected if entering using http.\n    \tkey: keyPath,\n    \tcert: certPath,\n    \tca: caPath // optional\n    \t}\n    }\n```\n\n---------------------------------------\n\n<a name=\"unregister\"/>\n#### Redbird##unregister(src)\n\n Unregisters a route. After calling this method, the given route will not\n be proxied anymore.\n  \n__Arguments__\n\n```javascript\n    src {String} {String|URL} A string or a url parsed by node url module.\n```\n\n---------------------------------------\n\n<a name=\"close\"/>\n#### Redbird##close()\n\n Close the proxy stoping all the incoming connections.\n \n---------------------------------------\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "redbird@0.2.3",
  "dist": {
    "shasum": "c05ecbd278d5b715bdf69804f4dbd8e484baefac"
  },
  "_from": "redbird@",
  "_resolved": "https://registry.npmjs.org/redbird/-/redbird-0.2.3.tgz"
}
