#!/bin/bash
readonly VERSION="0.1.20"

# Load configuration
source ~/.kran/kran.conf

function kran_logo(){
  cat <<EOF
  Λ
 |X|_______
 |X X_X_X_X'                What else would you
 |X|    _ ¿_                use to handle your
 |X| __| '__|_  _ ___       containers?
 |X|/ /| |/   \| '__ |
 |X| < |_| (_) | | | |      v. $VERSION
 |X|\_\   \__|_|_| |_|

EOF
}

function kran_usage(){
  cat <<EOF
usage `basename $0`
    up [site] - start container
    stop [site] - stop container
    status - show running sites
    build - build docker containers
    ssh - connect to container
    clean - run defined clean commands; kill all containers, and remove them
    init-site [name] - initialize site
    bootvm - Start VM and other mac stuff

EOF
}

# find relative directory
ARCH=$(uname)

if [ "$ARCH" == "Darwin" ]; then
  export DOCKER_HOST=tcp://kran:2375
  LOCAL_SITES=/Volumes/sites/
else
  LOCAL_SITES=$SITES
fi


PWD=$(pwd)
WD=${PWD/$LOCAL_SITES/}
DIR=${WD#*/}
#find site from path
IFS='/' read -ra ADDR <<< "$WD"
SITE=${ADDR[0]}

if [[ -z $SITE ]]; then
  SITE=$2
fi

function bootvm(){
  if [ "$ARCH" == "Darwin" ]; then
    if [ "$(boot2docker status)" != "running" ]; then
      if [ "$1" == "up" ]; then
        echo "==> Start boot2docker VM and other mac stuff"
        boot2docker start

        echo "==> Set up Volume container"
        docker rm kran-data
        docker run  -v /var/lib/boot2docker/sites:/sites --name kran-data busybox true

        echo "==> Share volume container with samba"
        docker run --rm -v $(which docker):/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba kran-data

        echo "==> Mount sites directory"
        mkdir -p /Volumes/sites
        mount -t smbfs //guest@192.168.59.103/sites /Volumes/sites
      else
        echo "boot2docker vm isn't running, 'kran bootvm' to get started"
        exit 1
      fi
    fi
  fi
}

function init(){
  if [[ -z $SITE ]] || [[ ! -f "$LOCAL_SITES$SITE/ports" ]]; then
    echo "Couldn't determine site, correct directory?";
    exit 1;
  fi
  source $LOCAL_SITES$SITE/ports
}

function start(){
  if [[ -f "$LOCAL_SITES$SITE/config" ]]; then
    source $LOCAL_SITES$SITE/config
  fi

  if [[ ! -z $PRE_UP ]]; then
    for cmd in "${PRE_UP[@]}"; do
      eval "$cmd"
      echo ""
    done
  fi

  echo "Running docker with site: $SITE"
  echo "==> http://kran:"$HTTP
  echo "==> ssh root@kran -p "$SSH
  echo ""

  # Run docker, map directories
  docker run -p $HTTP:80 -p $SSH:22 --dns 8.8.8.8\
    -v $SITES$SITE/www:/var/www\
    -v $SITES$SITE/vhost:/etc/apache2/sites-enabled\
    -v $SITES$SITE/mysql:/var/lib/mysql\
    -d $IMAGE /opt/start.sh > /dev/null
}

function stop(){
  echo "Stopping container for site: $SITE"
  CONTAINERID=`docker ps | grep $HTTP | awk '{ print $1 }'`
  docker stop $CONTAINERID
}

function status(){
  if [[ ! -z $STATUS_CMD ]]; then
    eval "$STATUS_CMD"
  else
    printf "%-20s %-15s %-15s\n" "Site name:" "state:" "url:"
    for D in `find $LOCAL_SITES/* -maxdepth 0 -type d `; do
      source $D/ports

      CONTAINERID=`docker ps | grep $HTTP | awk '{ print $1 }'`

      SITE_NAME=`basename $D`
      if [ ! -z $CONTAINERID ]; then
        printf "%-20s %-15s %-15s\n" $SITE_NAME "running" "http://kran:"$HTTP
      else
        printf "%-20s %-15s %-15s\n" $SITE_NAME "-" "-"
      fi
    done
  fi
}

##
# Export sites and address for site
#
function export(){
  for D in `find $LOCAL_SITES/* -maxdepth 0 -type d `;
    do
      source $D/ports
      CONTAINERID=`docker ps | grep $HTTP | awk '{ print $1 }'`

      SITE_NAME=`basename $D`
      if [ ! -z $CONTAINERID ]; then
        echo $SITE_NAME"\\http://kran:"$HTTP
      else
        echo $SITE_NAME
      fi
    done
}

function build(){
  if [ -d "~/.kran/images/$2" ]; then
      cat ~/.ssh/id_rsa.pub > ~/.kran/images/$2/adds/id_rsa.pub;
      cd ~/.kran/images/$2; docker build --rm -t="kran/$2" .;
    exit;
  fi

  for D in `find ~/.kran/images/* -maxdepth 0 -type d `
    do
      IMAGE_NAME=`basename $D`
      cat ~/.ssh/id_rsa.pub > $D/adds/id_rsa.pub;
      cd $D; docker build --rm -t="kran/$IMAGE_NAME" .;
    done
}

function connect_ssh(){
  ARGS="${@:2}"
  echo "Connecting to container via ssh"

  # Remove the old entry for known_hosts (changes on each build)
  ssh-keygen -f "~/.ssh/known_hosts" -R [kran]:$SSH > /dev/null 2>&1

  if [[ -z $ARGS ]]; then
    # Dont store knownhosts, dont check
    ssh -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -o 'LogLevel=quiet' root@kran -p $SSH
  else
    ssh -n -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -o 'LogLevel=quiet' root@kran -p $SSH "$ARGS"
  fi
}

function copy_ssh(){
  scp -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -o 'LogLevel=quiet' -P $SSH $2 root@kran:$3
}

function initalize_site(){
  if [[ -d "$LOCAL_SITES$2" ]]; then
    echo "Site already exists?"
  else
    echo "Initialize site $2"
    echo $LOCAL_SITES$2

    # Create site folders.
    mkdir -p $LOCAL_SITES$2/www
    mkdir -p $LOCAL_SITES$2/www/public_html
    mkdir -p $LOCAL_SITES$2/www/tmp
    mkdir -p $LOCAL_SITES$2/www/logs
    mkdir -p $LOCAL_SITES$2/tmp
    mkdir -p $LOCAL_SITES$2/mysql
    mkdir -p $LOCAL_SITES$2/vhost

    # Add default vhost.
    cp ~/.kran/vhost/000-default $LOCAL_SITES$2/vhost/000-default

    # Get latest port.
    source ~/.kran/port.conf

    # Calculate new ports for container and port config.
    NEWPORT=$[PORT+2]
    HTTPPORT=$[PORT+1]
    SSHPORT=$[PORT+2]

    echo "PORT="$NEWPORT > ~/.kran/port.conf
    echo "HTTP="$HTTPPORT > $LOCAL_SITES$2/ports
    echo "SSH="$SSHPORT >> $LOCAL_SITES$2/ports

    # Fire up container and initialize site with db.
    docker run --rm  \
      -v $SITES$2/mysql:/var/lib/mysql\
      $IMAGE /opt/install_db.sh
    echo return
    exit
  fi
}

function clean(){
  if [[ ! -z $CLEAN ]]; then
    for cmd in "${CLEAN[@]}"; do
      eval "$cmd"
      echo ""
    done
  fi

  echo "This will kill all active containers, and remove all containers afterwards..."
  read -r -p "Are you sure? [y/N] " RESPONSE
  case $RESPONSE in
    [yY][eE][sS]|[yY] )
      # Kill all containers.
      docker ps -a -q | xargs docker kill
      echo "..."
      # Remove all containers.
      docker ps -a -q | xargs docker rm
      echo "... Done!"
      ;;
    *)
      exit
      ;;
  esac
}

function print_params(){
  echo "SITE=$SITE"
  echo "DIR=$DIR"
}

case $1 in
  up            ) kran_logo; bootvm; init; start;;
  stop          ) kran_logo; init; stop;;
  status        ) kran_logo; bootvm; status;;
  export        ) export;;
  build         ) kran_logo; bootvm; build;;
  ssh           ) init; connect_ssh $@;;
  scp           ) init; copy_ssh $@;;
  init-site | i ) bootvm; initalize_site $@;;
  clean         ) clean;;
  params        ) print_params;;
  bootvm        ) bootvm up;;
  *             ) kran_logo; kran_usage; exit 1;
esac
